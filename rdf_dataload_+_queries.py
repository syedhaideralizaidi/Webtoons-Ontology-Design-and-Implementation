# -*- coding: utf-8 -*-
"""rdf dataload + queries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pParHtNWiYybVkOLbnizHxy-kWd_5zno
"""

!pip install rdflib
import numpy as np
import pandas as pd
from rdflib import Graph
from rdflib import URIRef, Literal
from rdflib import Namespace
from rdflib.namespace import OWL, RDF, RDFS, XSD

dataframe = pd.read_csv('Webtoon Dataset.csv')
dataframe.at[319,'Writer']= "mame"
dataframe

g = Graph()
g.parse('project ontology.owl', format='xml')
wto = Namespace('http://www.semanticweb.org/WebToons#')
g.bind('wto', wto)

name = dataframe['Name']
name_url = dataframe['Reading Link']
writer = dataframe['Writer']
likes = dataframe['Likes']
genre = dataframe['Genre']
rating = dataframe['Rating']
subscriber = dataframe['Subscribers']
summary = dataframe['Summary']
update = dataframe['Update']

for i in range(len(name_url)):
    if "https:" in name_url[i]:
        #adding the manhwa (the uri being used is informative)
        g.add((URIRef(name_url[i]),RDF.type,URIRef('http://dbpedia.org/resource/Manhwa')))
        g.add((URIRef(name_url[i]),RDFS.label,Literal(name[i], datatype=XSD.string)))
        
        #adding writers of the manhwa
        str_writer = str(writer[i])
        writers = str_writer.split("/")
        for w in writers:
            temp = str(w)
            temp = temp.replace(" ","_")
            temp = URIRef(wto+temp)
            g.add((URIRef(name_url[i]),URIRef('http://dbpedia.org/ontology/writer'),temp))
            g.add((temp,RDFS.label,Literal(str(w), datatype=XSD.string)))
          
        #Adding Total Likes
        l = likes[i]
        if type(l) == str:
            if l.find("M") != -1:
                n,m = l.split("M")
                numb = float(n)*1000000
                g.add((URIRef(name_url[i]),wto.TotalLikes,Literal(numb, datatype=XSD.double)))
            elif l.find("K") != -1:
                n,m = l.split("K")
                numb = float(n)*1000
                g.add((URIRef(name_url[i]),wto.TotalLikes,Literal(numb, datatype=XSD.double)))
        else:
            g.add((URIRef(name_url[i]),wto.TotalLikes,Literal(l, datatype=XSD.double)))
        
        #Adding genre of the webtoon
        g_temp = genre[i]
        g_temp = g_temp.replace(" ","_")
        g.add((URIRef(name_url[i]),URIRef('http://dbpedia.org/ontology/genre'),URIRef(wto+g_temp)))
        g.add((URIRef(wto+g_temp),RDFS.label,Literal(genre[i], datatype=XSD.string)))
        
        #Adding rating
        g.add((URIRef(name_url[i]),wto.rating,Literal(rating[i], datatype=XSD.double)))

        #Adding Total Subscribers
        s = subscriber[i]
        if type(s) == str:
            if s.find("M") != -1:
                n,m = s.split("M")
                numb = float(n)*1000000
                g.add((URIRef(name_url[i]),wto.subscribers,Literal(numb, datatype=XSD.double)))
            elif s.find("K") != -1:
                n,m = s.split("K")
                numb = float(n)*1000
                g.add((URIRef(name_url[i]),wto.subscribers,Literal(numb, datatype=XSD.double)))
        else:
            g.add((URIRef(name_url[i]),wto.subscribers,Literal(s, datatype=XSD.double)))
            
        #Adding webtoon summary/abstract
        g.add((URIRef(name_url[i]),URIRef("http://dbpedia.org/ontology/abstract"),Literal(summary[i], datatype=XSD.string)))
        
        #Weekly schedule
        g.add((URIRef(name_url[i]),wto.WeeklySchedule,Literal(update[i], datatype=XSD.string)))

print("Saving graph to 'webtoons.ttl':")
g.serialize(destination='webtoons.ttl', format='ttl')

def Query(g, string):
    result = g.query(string)
    for row in result:
        length = len(row)
        for i in range(length):
            if i == length-1:        
                print(row[i])
            else:
                print(row[i], end=', ')

g = Graph()
g.parse('webtoons.ttl', format='ttl')

"""Get List of all Webtoons"""

def Query1(g):
    query="""Select Distinct ?name where{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name.
    }
    """
    Query(g, query)

Query1(g)

"""Get List of all Writers"""

def Query2(g):
    query="""Select Distinct ?name where{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        <http://dbpedia.org/ontology/writer> ?o.
        ?o rdfs:label ?name.
    }
    """
    Query(g, query)

Query2(g)

"""Get List of all Genres"""

def Query3(g):
    query="""Select Distinct ?genre where{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        <http://dbpedia.org/ontology/genre> ?o.
        ?o rdfs:label ?genre.
    }
    """
    Query(g, query)

Query3(g)

"""Get summary of Entered Manhwa"""

def Query4(g, data):
    query=f"""Select ?summary where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        <http://dbpedia.org/ontology/abstract> ?summary;
        Filter(?name = '{data}' ).
    }}
    """
    Query(g, query)

Query4(g,"Unholy Blood")

"""Get Subscribers of Entered Manhwa"""

def Query5(g, data):
    query=f"""Select ?subs where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        wto:subscribers ?subs;
        Filter(?name = '{data}' ).
    }}
    """
    Query(g, query)

Query5(g,"Unholy Blood")

"""Get Likes of Entered Manhwa"""

def Query6(g, data):
    query=f"""Select ?likes where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        wto:TotalLikes ?likes;
        Filter(?name = '{data}' ).
    }}
    """
    Query(g, query)

Query6(g,"Unholy Blood")

"""Get Rating of Entered Manhwa"""

def Query7(g, data):
    query=f"""Select ?rating where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        wto:rating ?rating;
        Filter(?name = '{data}' ).
    }}
    """
    Query(g, query)

Query7(g,"Unholy Blood")

"""Get Schedule of Entered Manhwa"""

def Query8(g, data):
    query=f"""Select ?schedule where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        wto:WeeklySchedule ?schedule;
        Filter(?name = '{data}' ).
    }}
    """
    Query(g, query)

Query8(g,"Unholy Blood")

"""Get Reading Link of Entered Manhwa"""

def Query9(g, data):
    query=f"""Select ?s where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        Filter(?name = '{data}').
    }}
    """
    Query(g, query)

Query9(g,"Unholy Blood")

"""Get list of Webtoons that are up every X day """

def Query10(g, data):
    data= data.upper()
    query=f"""Select distinct ?name where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        wto:WeeklySchedule ?schedule;
        Filter(?schedule = '{data}' ).
    }}
    """
    Query(g, query)

Query10(g,"up every monday")

"""What is the Genre of Entered Manhwa?"""

def Query11(g, data):
    query=f"""Select ?genre where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        <http://dbpedia.org/ontology/genre> ?o.
        ?o rdfs:label ?genre.
        Filter(?name = '{data}').
    }}
    """
    Query(g, query)

Query11(g,"Unholy Blood")

"""Get names of all Manhwas written by Entered Writer"""

def Query12(g, data):
    query=f"""Select distinct ?name where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        <http://dbpedia.org/ontology/writer> ?o.
        ?o rdfs:label ?writer.
        Filter(?writer = '{data}' ).
    }}
    """
    Query(g, query)

Query12(g,"Paola Batalla")

"""What Genre of Webtoon is most abundant?"""

def Query13(g):
    query="""
    SELECT ?g (COUNT(?genre) AS ?cnt)
    WHERE {
        ?s <http://dbpedia.org/ontology/genre> ?genre.
        ?genre rdfs:label ?g.

    }
    GROUP BY ?genre
    ORDER BY DESC(?cnt)
    limit 1

    """
    Query(g, query)

Query13(g)

def Query14(g):
    query="""
    SELECT ?g (COUNT(?genre) AS ?cnt)
    WHERE {
        ?s <http://dbpedia.org/ontology/genre> ?genre.
        ?genre rdfs:label ?g.

    }
    GROUP BY ?genre
    ORDER BY DESC(?cnt)
    """
    Query(g, query)

Query14(g)

"""What is the most liked Genre?"""

def Query15(g):
    query="""
    SELECT ?g (SUM(?likes) AS ?cnt)
    WHERE {
        ?s <http://dbpedia.org/ontology/genre> ?genre;
        wto:TotalLikes ?likes.
        ?genre rdfs:label ?g.

    }
    GROUP BY ?genre
    ORDER BY DESC(?cnt)
    limit 1
    """
    Query(g, query)

Query15(g)

"""Ordered Total likes of all Genres?"""

def Query16(g):
    query="""
    SELECT ?g (SUM(?likes) AS ?cnt)
    WHERE {
        ?s <http://dbpedia.org/ontology/genre> ?genre;
        wto:TotalLikes ?likes.
        ?genre rdfs:label ?g.

    }
    GROUP BY ?genre
    ORDER BY DESC(?cnt)
    """
    Query(g, query)

Query16(g)

"""Get main character of Entered Webtoon"""

def Query17(g, data):
    query=f"""Select ?maincharacter where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        wto:HasCharacter ?character.
        ?character rdf:type <http://www.semanticweb.org/WebToons#Main_Character>;
        rdfs:label ?maincharacter.
        Filter(?name = '{data}' ).
    }}
    """
    Query(g, query)

Query17(g,"naruto")

"""Get Side character of Entered Webtoon"""

def Query18(g, data):
    query=f"""Select ?maincharacter where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name;
        wto:HasCharacter ?character.
        ?character rdf:type <http://www.semanticweb.org/WebToons#Side_Character>;
        rdfs:label ?maincharacter.
        Filter(?name = '{data}' ).
    }}
    """
    Query(g, query)

Query18(g,"naruto")

"""In which chapter does Entered Character appear for the first time? """

def Query19(g, data1, data2):
    query=f"""Select ?chapter where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name1;
        wto:HasCharacter ?character.
        ?character rdfs:label ?name2.
        ?character <http://www.semanticweb.org/WebToons#FirstAppearance> ?ch.
        ?ch rdfs:label ?chapter.
        Filter(?name1 = '{data1}' && ?name2 ='{data2}').

    }}
    """
    Query(g, query)

Query19(g,"naruto", "naruto uzamaki")

"""Get enemy of character X in Manhwa X"""

def Query20(g, data1, data2):
    query=f"""Select ?enemy where{{
        ?s rdf:type <http://dbpedia.org/resource/Manhwa>;
        rdfs:label ?name1;
        wto:HasCharacter ?character.
        ?character rdfs:label ?name2.
        ?character <http://www.semanticweb.org/WebToons#Enemy> ?enm.
        ?enm rdfs:label ?enemy.
        Filter(?name1 = '{data1}' && ?name2 ='{data2}').

    }}
    """
    Query(g, query)

Query20(g,"naruto", "sasuke uchiha")





